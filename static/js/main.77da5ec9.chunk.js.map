{"version":3,"sources":["logo.svg","components/Modal.js","components/ListTile.js","components/HeaderPanel.js","components/Footer.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ModalComponent","props","Modal","show","showPopup","Header","Title","incomeType","Body","onSubmit","handleFormSubmit","name","type","onChange","handleInput","Footer","Button","variant","onClick","handleShowPopup","handleSubmit","ListTile","expenditure","localStorage","getItem","JSON","parse","map","spend","index","ListGroup","Item","style","key","spended","date","description","moneyValue","HeaderPanel","Col","Row","popShow","Home","event","target","setState","value","getDate","today","Date","dd","String","padStart","mm","getMonth","yyyy","getFullYear","updateSpendMoney","money","updateMoney","state","spendedMoney","setItem","spendMon","updateIncome","income","console","log","incMony","calculateBalance","currentBal","incomeMoney","currentBalance","spendMoney","addedMoney","moneyObj","stringify","concat","loaded","showModal","flag","expende","this","Container","length","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.77da5ec9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nfunction ModalComponent(props) {\r\n    return (\r\n        <Modal show={props.showPopup} >\r\n            <Modal.Header >\r\n            <Modal.Title>{props.incomeType ? \"Add Spended Money\" : \"Add Received Money\"}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n            <form onSubmit={props.handleFormSubmit}>\r\n                <label>\r\n                {props.incomeType ? \"Spended Money\" : \"Add Money\"}    : <input name=\"addedMoney\" type=\"number\" onChange={props.handleInput} />\r\n                </label>\r\n                <label>\r\n                Add Description: <input name=\"description\" type=\"text\" onChange={props.handleInput} />\r\n                </label>\r\n\r\n            </form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={() => props.handleShowPopup(false)} >\r\n                Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={props.handleSubmit}>\r\n                Save Changes\r\n            </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ModalComponent;\r\n","import React from 'react';\r\nimport { ListGroup, ListGroupItem } from 'react-bootstrap';\r\n\r\nfunction ListTile(props) {\r\n\r\n    const expenditure = localStorage.getItem('expenditure') === null ? props.expenditure : JSON.parse(localStorage.getItem('expenditure'))\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                expenditure.map((spend, index) => {\r\n                    return(\r\n                        <ListGroup.Item \r\n                            style={{\r\n                                \"display\": \"flex\",\r\n                                \"justifyContent\": \"space-between\"\r\n                            }} \r\n                            key={index} \r\n                            variant={spend.spended ? \"danger\" : \"success\"}>\r\n                            <div>{spend.date}</div>\r\n                            <div>{spend.description}</div>\r\n                            <div>{\"Rs.\"}{spend.moneyValue}</div>\r\n                        </ListGroup.Item>\r\n                    ) \r\n                  })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListTile\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nfunction HeaderPanel() {\r\n    return (\r\n        <Col style={{ \"backgroundColor\": \"#c3c3c3\", \"height\": \"100px\" }}>\r\n            <div >\r\n              <Col style={{ \"textAlign\": \"start\", \"marginTop\": \"35px\" }}>\r\n                <label><b>Balance: </b> Rs. {localStorage.getItem('currentBalance')}</label>\r\n                <div>\r\n                  <Row>\r\n                    <Col>\r\n                      <label>Income: {localStorage.getItem('income')}</label>\r\n                    </Col>\r\n                    <Col>\r\n                      <label>Spended: {localStorage.getItem('spendedMoney')}</label>\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n              </Col>\r\n            </div>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default HeaderPanel\r\n","import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col'\r\nimport CustomButton from './CustomButton';\r\n\r\nfunction Footer(props) {\r\n\r\n   /*  const buttonList = [\r\n        {\r\n            key: 'successbtn',\r\n            label: 'Add Money (+)',\r\n            type: 'success',\r\n            handler : 'popShow',\r\n            input: 'Add'\r\n        },\r\n        {\r\n            key: 'dangerbtn',\r\n            label: 'Spended Money (+)',\r\n            type: 'danger',\r\n            handler : 'popShow',\r\n            input : ''\r\n        }\r\n    ]; */\r\n\r\n    return (\r\n        <Row style={{ 'marginTop': \"20px\" }}>\r\n          {\r\n              /* buttonList.map((buttonInfo) => {\r\n                  return(\r\n                      <CustomButton\r\n                        key={buttonInfo.key}\r\n                        label={buttonInfo.label}\r\n                        type={buttonInfo.type}\r\n                        handler={props.popShow}\r\n                      >\r\n                      </CustomButton>\r\n                  )\r\n              }) */\r\n          }\r\n          <Col>\r\n            <Button variant=\"success\" onClick={() => props.popShow(\"Add\")}>Add Money (+)</Button>\r\n          </Col>\r\n          <Col>\r\n            <Button variant=\"danger\" onClick={() => props.popShow()}>Spended Money (-)</Button>\r\n          </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React, { Component, Fragment } from 'react';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport { ListGroup, ListGroupItem } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button'\nimport ModalComponent from './Modal';\nimport ListTile from './ListTile';\nimport HeaderPanel from './HeaderPanel';\nimport Footer from './Footer';\n\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentBalance: 12000,\n      income: 0,\n      spendedMoney: 0,\n      expenditure: [],\n      showPopup: false,\n      incomeType: false,\n      addedMoney: 0,\n      description: \"\",\n      loaded: false\n    };\n  }\n\n  handleInput = (event) => {\n    const target = event.target\n    const name = target.name\n    this.setState({\n      [name]: event.target.value\n    })\n  }\n\n  componentDidMount() {\n    console.log(localStorage.getItem('spendedMoney'))\n    const expende = JSON.parse(localStorage.getItem('expenditure'));\n    if (localStorage.getItem('spendedMoney')) {\n      this.setState({\n        spendedMoney: localStorage.getItem('spendedMoney'),\n        income: localStorage.getItem('income'),\n        currentBalance: localStorage.getItem('currentBalance'),\n        expenditure: expende\n      })\n    }\n  }\n\n\n  getDate = () => {\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n    var yyyy = today.getFullYear();\n    today = mm + '/' + dd + '/' + yyyy;\n    return today\n  }\n\n  updateSpendMoney = (money) => {\n    var updateMoney = this.state.spendedMoney - money\n    localStorage.setItem('spendedMoney', updateMoney);\n    const spendMon = localStorage.getItem('spendedMoney')\n    this.setState({\n      spendedMoney: spendMon\n    })\n  }\n\n  updateIncome = (money) => {\n    var updateMoney = +this.state.income + +money\n    console.log(money, \"money\")\n    localStorage.setItem('income', updateMoney);\n    const incMony = localStorage.getItem('income')\n    this.setState({\n      income: incMony\n    })\n  }\n\n  calculateBalance = (money, spended) => {\n    console.log(spended)\n    const currentBal = spended ? this.spendedMoney(money) : this.incomeMoney(money)\n    console.log(currentBal, \"currentBal\")\n    // const currentBalance = localStorage.getItem('currentBalance');\n    localStorage.setItem('currentBalance', currentBal);\n    this.setState({\n      currentBalance: localStorage.getItem('currentBalance')\n    }, () => {\n      localStorage.setItem('currentBalance', this.state.currentBalance);\n    })\n    spended ? this.updateSpendMoney(money) : this.updateIncome(money)\n\n  }\n\n  spendedMoney = (spendMoney) => {\n    console.log(this.state.currentBalance - spendMoney, \"<-=--=-=-=\")\n    return this.state.currentBalance - spendMoney;\n  }\n\n  incomeMoney = (addedMoney) => {\n    console.log(+this.state.currentBalance + +addedMoney, addedMoney, \"-=--=-\")\n    return (+this.state.currentBalance + +addedMoney);\n  }\n\n  handleSubmit = () => {\n    var date = this.getDate()\n    const moneyObj = {\n      moneyValue: this.state.addedMoney,\n      description: this.state.description,\n      spended: this.state.incomeType,\n      date: date\n    }\n    localStorage.setItem('expenditure', JSON.stringify(this.state.expenditure));\n    this.setState({\n      expenditure: this.state.expenditure.concat(moneyObj),\n      showPopup: false,\n      loaded: true\n    }, () => {\n      localStorage.setItem('expenditure', JSON.stringify(this.state.expenditure));\n      this.calculateBalance(this.state.addedMoney, this.state.incomeType)\n\n    })\n  }\n\n  showModal = () => {\n    return (\n     <Fragment>\n      <ModalComponent \n          showPopup={this.state.showPopup}\n          incomeType={this.state.incomeType}\n          handleFormSubmit={this.handleFormSubmit}\n          handleInput={this.handleInput}\n          handleSubmit={this.handleSubmit}\n          handleShowPopup={this.handleShowPopup}\n        />\n     </Fragment> \n    )\n  }\n\n  handleShowPopup = (flag) => {\n    this.setState({\n      showPopup: flag\n    })\n  }\n  popShow = (type) => {\n    this.setState({\n      showPopup: true,\n      incomeType: type == \"Add\" ? false : true\n    })\n  }\n\n  render() {\n\n    const expenditure = localStorage.getItem('expenditure') === null ? this.state.expenditure : JSON.parse(localStorage.getItem('expenditure'))\n\n    return (\n      <Container >\n        {this.showModal()}\n        <Row>\n          <HeaderPanel/>\n        </Row>\n        <Row style={{ 'marginTop': \"20px\" }}>\n          <Col style={{ \"backgroundColor\": \"white\" }}>\n            <ListGroup >\n              {\n                expenditure.length == 0 ? <p>No Spended money</p> :  <ListTile expenditure={this.state.expenditure}/>\n              }\n            </ListGroup>\n          </Col>\n        </Row>\n        <Footer popShow={this.popShow}/>\n      </Container>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}